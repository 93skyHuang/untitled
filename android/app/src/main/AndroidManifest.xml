<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.untitled">
   <application
        android:label="自由灵魂"
        android:usesCleartextTraffic="true"
        android:icon="@mipmap/ic_launcher">
        <activity
            android:name=".MainActivity"
            android:launchMode="singleTop"
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <!-- Displays an Android View that continues showing the launch screen
                 Drawable until Flutter paints its first frame, then this splash
                 screen fades out. A splash screen is useful to avoid any visual
                 gap between the end of Android's launch screen and the painting of
                 Flutter's first frame. -->
            <meta-data
              android:name="io.flutter.embedding.android.SplashScreenDrawable"
              android:resource="@drawable/launch_background"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />

       <!-- 云信后台服务，请使用独立进程。 -->
       <service
           android:name="com.netease.nimlib.service.NimService"
           android:process=":core"/>

       <!-- 云信后台辅助服务 -->
       <service
           android:name="com.netease.nimlib.service.NimService$Aux"
           android:process=":core"/>

       <!-- 云信后台辅助服务 -->
       <service
           android:name="com.netease.nimlib.job.NIMJobService"
           android:exported="true"
           android:permission="android.permission.BIND_JOB_SERVICE"
           android:process=":core"/>

       <!-- 云信监视系统启动和网络变化的广播接收器，保持和 NimService 同一进程 -->
       <receiver android:name="com.netease.nimlib.service.NimReceiver"
           android:process=":core"
           android:exported="false">
           <intent-filter>
               <action android:name="android.intent.action.BOOT_COMPLETED"/>
               <action android:name="android.net.conn.CONNECTIVITY_CHANGE"/>
           </intent-filter>
       </receiver>

       <!-- 云信进程间通信 Receiver -->
       <receiver android:name="com.netease.nimlib.service.ResponseReceiver"/>

       <!-- 云信进程间通信service -->
       <service android:name="com.netease.nimlib.service.ResponseService"/>

       <!-- 云信进程间通信provider -->
       <provider
           android:name="com.netease.nimlib.ipc.NIMContentProvider"
           android:authorities="com.netease.nim.demo.ipc.provider"
           android:exported="false"
           android:process=":core" />

       <!-- 云信内部使用的进程间通信provider -->
       <!-- SDK启动时会强制检测该组件的声明是否配置正确，如果检测到该声明不正确，SDK会主动抛出异常引发崩溃 -->
       <provider
           android:name="com.netease.nimlib.ipc.cp.provider.PreferenceContentProvider"
           android:authorities="com.getexample.untitled.ipc.provider.preference"
           android:exported="false" />
    </application>
</manifest>
